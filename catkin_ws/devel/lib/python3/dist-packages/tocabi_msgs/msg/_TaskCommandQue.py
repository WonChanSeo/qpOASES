# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tocabi_msgs/TaskCommandQue.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tocabi_msgs.msg

class TaskCommandQue(genpy.Message):
  _md5sum = "072a98112aff33a4aa8fe36313da5528"
  _type = "tocabi_msgs/TaskCommandQue"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """TaskCommand[] tque
================================================================================
MSG: tocabi_msgs/TaskCommand
# CoM/Pelvis Control
float64 ratio # left foot 0 ----- 1 right foot
float64 height

float64 pelv_pitch
float64 roll
float64 pitch
float64 yaw

uint32 solver
uint32 contactredis

bool maintain_lc

# Contact 
bool left
bool right

# Contact 
bool left_foot
bool right_foot
bool left_hand
bool right_hand

# Control Duration And Mode
float64 time
int32 mode

# Left/Right Arm Control
float64 l_x
float64 l_y
float64 l_z
float64 l_roll
float64 l_pitch
float64 l_yaw

float64 r_x
float64 r_y
float64 r_z
float64 r_roll
float64 r_pitch
float64 r_yaw

# Walking
uint32 walking_enable
uint32 pattern
uint32 pattern2
uint32 comcontrol
uint32 ik_mode
bool dob
bool imu
bool mom
bool MPC
uint32 first_foot_step
float32 x
float32 y
float32 z
float32 walking_height
float32 theta
float32 step_length_x
float32 step_length_y

# TaskGain
bool customTaskGain
float32 acc_p
float32 pos_p
float32 pos_d
float32 ang_p
float32 ang_d
"""
  __slots__ = ['tque']
  _slot_types = ['tocabi_msgs/TaskCommand[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tque

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TaskCommandQue, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.tque is None:
        self.tque = []
    else:
      self.tque = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.tque)
      buff.write(_struct_I.pack(length))
      for val1 in self.tque:
        _x = val1
        buff.write(_get_struct_6d2I7Bdi12d5I4BI7fB5f().pack(_x.ratio, _x.height, _x.pelv_pitch, _x.roll, _x.pitch, _x.yaw, _x.solver, _x.contactredis, _x.maintain_lc, _x.left, _x.right, _x.left_foot, _x.right_foot, _x.left_hand, _x.right_hand, _x.time, _x.mode, _x.l_x, _x.l_y, _x.l_z, _x.l_roll, _x.l_pitch, _x.l_yaw, _x.r_x, _x.r_y, _x.r_z, _x.r_roll, _x.r_pitch, _x.r_yaw, _x.walking_enable, _x.pattern, _x.pattern2, _x.comcontrol, _x.ik_mode, _x.dob, _x.imu, _x.mom, _x.MPC, _x.first_foot_step, _x.x, _x.y, _x.z, _x.walking_height, _x.theta, _x.step_length_x, _x.step_length_y, _x.customTaskGain, _x.acc_p, _x.pos_p, _x.pos_d, _x.ang_p, _x.ang_d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tque is None:
        self.tque = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tque = []
      for i in range(0, length):
        val1 = tocabi_msgs.msg.TaskCommand()
        _x = val1
        start = end
        end += 248
        (_x.ratio, _x.height, _x.pelv_pitch, _x.roll, _x.pitch, _x.yaw, _x.solver, _x.contactredis, _x.maintain_lc, _x.left, _x.right, _x.left_foot, _x.right_foot, _x.left_hand, _x.right_hand, _x.time, _x.mode, _x.l_x, _x.l_y, _x.l_z, _x.l_roll, _x.l_pitch, _x.l_yaw, _x.r_x, _x.r_y, _x.r_z, _x.r_roll, _x.r_pitch, _x.r_yaw, _x.walking_enable, _x.pattern, _x.pattern2, _x.comcontrol, _x.ik_mode, _x.dob, _x.imu, _x.mom, _x.MPC, _x.first_foot_step, _x.x, _x.y, _x.z, _x.walking_height, _x.theta, _x.step_length_x, _x.step_length_y, _x.customTaskGain, _x.acc_p, _x.pos_p, _x.pos_d, _x.ang_p, _x.ang_d,) = _get_struct_6d2I7Bdi12d5I4BI7fB5f().unpack(str[start:end])
        val1.maintain_lc = bool(val1.maintain_lc)
        val1.left = bool(val1.left)
        val1.right = bool(val1.right)
        val1.left_foot = bool(val1.left_foot)
        val1.right_foot = bool(val1.right_foot)
        val1.left_hand = bool(val1.left_hand)
        val1.right_hand = bool(val1.right_hand)
        val1.dob = bool(val1.dob)
        val1.imu = bool(val1.imu)
        val1.mom = bool(val1.mom)
        val1.MPC = bool(val1.MPC)
        val1.customTaskGain = bool(val1.customTaskGain)
        self.tque.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.tque)
      buff.write(_struct_I.pack(length))
      for val1 in self.tque:
        _x = val1
        buff.write(_get_struct_6d2I7Bdi12d5I4BI7fB5f().pack(_x.ratio, _x.height, _x.pelv_pitch, _x.roll, _x.pitch, _x.yaw, _x.solver, _x.contactredis, _x.maintain_lc, _x.left, _x.right, _x.left_foot, _x.right_foot, _x.left_hand, _x.right_hand, _x.time, _x.mode, _x.l_x, _x.l_y, _x.l_z, _x.l_roll, _x.l_pitch, _x.l_yaw, _x.r_x, _x.r_y, _x.r_z, _x.r_roll, _x.r_pitch, _x.r_yaw, _x.walking_enable, _x.pattern, _x.pattern2, _x.comcontrol, _x.ik_mode, _x.dob, _x.imu, _x.mom, _x.MPC, _x.first_foot_step, _x.x, _x.y, _x.z, _x.walking_height, _x.theta, _x.step_length_x, _x.step_length_y, _x.customTaskGain, _x.acc_p, _x.pos_p, _x.pos_d, _x.ang_p, _x.ang_d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tque is None:
        self.tque = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tque = []
      for i in range(0, length):
        val1 = tocabi_msgs.msg.TaskCommand()
        _x = val1
        start = end
        end += 248
        (_x.ratio, _x.height, _x.pelv_pitch, _x.roll, _x.pitch, _x.yaw, _x.solver, _x.contactredis, _x.maintain_lc, _x.left, _x.right, _x.left_foot, _x.right_foot, _x.left_hand, _x.right_hand, _x.time, _x.mode, _x.l_x, _x.l_y, _x.l_z, _x.l_roll, _x.l_pitch, _x.l_yaw, _x.r_x, _x.r_y, _x.r_z, _x.r_roll, _x.r_pitch, _x.r_yaw, _x.walking_enable, _x.pattern, _x.pattern2, _x.comcontrol, _x.ik_mode, _x.dob, _x.imu, _x.mom, _x.MPC, _x.first_foot_step, _x.x, _x.y, _x.z, _x.walking_height, _x.theta, _x.step_length_x, _x.step_length_y, _x.customTaskGain, _x.acc_p, _x.pos_p, _x.pos_d, _x.ang_p, _x.ang_d,) = _get_struct_6d2I7Bdi12d5I4BI7fB5f().unpack(str[start:end])
        val1.maintain_lc = bool(val1.maintain_lc)
        val1.left = bool(val1.left)
        val1.right = bool(val1.right)
        val1.left_foot = bool(val1.left_foot)
        val1.right_foot = bool(val1.right_foot)
        val1.left_hand = bool(val1.left_hand)
        val1.right_hand = bool(val1.right_hand)
        val1.dob = bool(val1.dob)
        val1.imu = bool(val1.imu)
        val1.mom = bool(val1.mom)
        val1.MPC = bool(val1.MPC)
        val1.customTaskGain = bool(val1.customTaskGain)
        self.tque.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d2I7Bdi12d5I4BI7fB5f = None
def _get_struct_6d2I7Bdi12d5I4BI7fB5f():
    global _struct_6d2I7Bdi12d5I4BI7fB5f
    if _struct_6d2I7Bdi12d5I4BI7fB5f is None:
        _struct_6d2I7Bdi12d5I4BI7fB5f = struct.Struct("<6d2I7Bdi12d5I4BI7fB5f")
    return _struct_6d2I7Bdi12d5I4BI7fB5f
