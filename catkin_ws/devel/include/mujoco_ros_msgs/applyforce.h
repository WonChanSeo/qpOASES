// Generated by gencpp from file mujoco_ros_msgs/applyforce.msg
// DO NOT EDIT!


#ifndef MUJOCO_ROS_MSGS_MESSAGE_APPLYFORCE_H
#define MUJOCO_ROS_MSGS_MESSAGE_APPLYFORCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Wrench.h>

namespace mujoco_ros_msgs
{
template <class ContainerAllocator>
struct applyforce_
{
  typedef applyforce_<ContainerAllocator> Type;

  applyforce_()
    : header()
    , link_idx(0)
    , wrench()  {
    }
  applyforce_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , link_idx(0)
    , wrench(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _link_idx_type;
  _link_idx_type link_idx;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _wrench_type;
  _wrench_type wrench;





  typedef boost::shared_ptr< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> const> ConstPtr;

}; // struct applyforce_

typedef ::mujoco_ros_msgs::applyforce_<std::allocator<void> > applyforce;

typedef boost::shared_ptr< ::mujoco_ros_msgs::applyforce > applyforcePtr;
typedef boost::shared_ptr< ::mujoco_ros_msgs::applyforce const> applyforceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mujoco_ros_msgs::applyforce_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mujoco_ros_msgs::applyforce_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::applyforce_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.link_idx == rhs.link_idx &&
    lhs.wrench == rhs.wrench;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mujoco_ros_msgs::applyforce_<ContainerAllocator1> & lhs, const ::mujoco_ros_msgs::applyforce_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mujoco_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ee7f4f2e710ae4bacde2eacbc01b372";
  }

  static const char* value(const ::mujoco_ros_msgs::applyforce_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ee7f4f2e710ae4bULL;
  static const uint64_t static_value2 = 0xacde2eacbc01b372ULL;
};

template<class ContainerAllocator>
struct DataType< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mujoco_ros_msgs/applyforce";
  }

  static const char* value(const ::mujoco_ros_msgs::applyforce_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint32 link_idx\n"
"geometry_msgs/Wrench wrench\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mujoco_ros_msgs::applyforce_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.link_idx);
      stream.next(m.wrench);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct applyforce_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mujoco_ros_msgs::applyforce_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mujoco_ros_msgs::applyforce_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "link_idx: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.link_idx);
    s << indent << "wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.wrench);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MUJOCO_ROS_MSGS_MESSAGE_APPLYFORCE_H
