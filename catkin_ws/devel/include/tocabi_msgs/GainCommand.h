// Generated by gencpp from file tocabi_msgs/GainCommand.msg
// DO NOT EDIT!


#ifndef TOCABI_MSGS_MESSAGE_GAINCOMMAND_H
#define TOCABI_MSGS_MESSAGE_GAINCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tocabi_msgs
{
template <class ContainerAllocator>
struct GainCommand_
{
  typedef GainCommand_<ContainerAllocator> Type;

  GainCommand_()
    : gain()  {
    }
  GainCommand_(const ContainerAllocator& _alloc)
    : gain(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _gain_type;
  _gain_type gain;





  typedef boost::shared_ptr< ::tocabi_msgs::GainCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tocabi_msgs::GainCommand_<ContainerAllocator> const> ConstPtr;

}; // struct GainCommand_

typedef ::tocabi_msgs::GainCommand_<std::allocator<void> > GainCommand;

typedef boost::shared_ptr< ::tocabi_msgs::GainCommand > GainCommandPtr;
typedef boost::shared_ptr< ::tocabi_msgs::GainCommand const> GainCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tocabi_msgs::GainCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tocabi_msgs::GainCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tocabi_msgs::GainCommand_<ContainerAllocator1> & lhs, const ::tocabi_msgs::GainCommand_<ContainerAllocator2> & rhs)
{
  return lhs.gain == rhs.gain;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tocabi_msgs::GainCommand_<ContainerAllocator1> & lhs, const ::tocabi_msgs::GainCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tocabi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::GainCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::GainCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::GainCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::GainCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::GainCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::GainCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tocabi_msgs::GainCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c20626106c906e9199e80342c8b1a924";
  }

  static const char* value(const ::tocabi_msgs::GainCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc20626106c906e91ULL;
  static const uint64_t static_value2 = 0x99e80342c8b1a924ULL;
};

template<class ContainerAllocator>
struct DataType< ::tocabi_msgs::GainCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tocabi_msgs/GainCommand";
  }

  static const char* value(const ::tocabi_msgs::GainCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tocabi_msgs::GainCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] gain\n"
"\n"
;
  }

  static const char* value(const ::tocabi_msgs::GainCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tocabi_msgs::GainCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gain);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GainCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tocabi_msgs::GainCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tocabi_msgs::GainCommand_<ContainerAllocator>& v)
  {
    s << indent << "gain[]" << std::endl;
    for (size_t i = 0; i < v.gain.size(); ++i)
    {
      s << indent << "  gain[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gain[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOCABI_MSGS_MESSAGE_GAINCOMMAND_H
