// Generated by gencpp from file tocabi_msgs/WalkingCommand.msg
// DO NOT EDIT!


#ifndef TOCABI_MSGS_MESSAGE_WALKINGCOMMAND_H
#define TOCABI_MSGS_MESSAGE_WALKINGCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tocabi_msgs
{
template <class ContainerAllocator>
struct WalkingCommand_
{
  typedef WalkingCommand_<ContainerAllocator> Type;

  WalkingCommand_()
    : header()
    , walk_mode(0)
    , compensator_mode()
    , ik_mode(0)
    , heel_toe(false)
    , first_foot_step(false)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , height(0.0)
    , theta(0.0)
    , step_length_x(0.0)
    , step_length_y(0.0)
    , walking_pattern(false)  {
      compensator_mode.assign(false);
  }
  WalkingCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , walk_mode(0)
    , compensator_mode()
    , ik_mode(0)
    , heel_toe(false)
    , first_foot_step(false)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , height(0.0)
    , theta(0.0)
    , step_length_x(0.0)
    , step_length_y(0.0)
    , walking_pattern(false)  {
  (void)_alloc;
      compensator_mode.assign(false);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _walk_mode_type;
  _walk_mode_type walk_mode;

   typedef boost::array<uint8_t, 2>  _compensator_mode_type;
  _compensator_mode_type compensator_mode;

   typedef uint32_t _ik_mode_type;
  _ik_mode_type ik_mode;

   typedef uint8_t _heel_toe_type;
  _heel_toe_type heel_toe;

   typedef uint8_t _first_foot_step_type;
  _first_foot_step_type first_foot_step;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _height_type;
  _height_type height;

   typedef float _theta_type;
  _theta_type theta;

   typedef float _step_length_x_type;
  _step_length_x_type step_length_x;

   typedef float _step_length_y_type;
  _step_length_y_type step_length_y;

   typedef uint8_t _walking_pattern_type;
  _walking_pattern_type walking_pattern;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(STATIC_WALKING)
  #undef STATIC_WALKING
#endif
#if defined(_WIN32) && defined(HIP_COMPENSTOR)
  #undef HIP_COMPENSTOR
#endif
#if defined(_WIN32) && defined(EXTERNAL_ENCODER)
  #undef EXTERNAL_ENCODER
#endif
#if defined(_WIN32) && defined(IK)
  #undef IK
#endif
#if defined(_WIN32) && defined(JACOBIAN)
  #undef JACOBIAN
#endif
#if defined(_WIN32) && defined(QP)
  #undef QP
#endif

  enum {
    NONE = 0u,
    STATIC_WALKING = 1u,
    HIP_COMPENSTOR = 0u,
    EXTERNAL_ENCODER = 1u,
    IK = 0u,
    JACOBIAN = 1u,
    QP = 2u,
  };


  typedef boost::shared_ptr< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> const> ConstPtr;

}; // struct WalkingCommand_

typedef ::tocabi_msgs::WalkingCommand_<std::allocator<void> > WalkingCommand;

typedef boost::shared_ptr< ::tocabi_msgs::WalkingCommand > WalkingCommandPtr;
typedef boost::shared_ptr< ::tocabi_msgs::WalkingCommand const> WalkingCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tocabi_msgs::WalkingCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tocabi_msgs::WalkingCommand_<ContainerAllocator1> & lhs, const ::tocabi_msgs::WalkingCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.walk_mode == rhs.walk_mode &&
    lhs.compensator_mode == rhs.compensator_mode &&
    lhs.ik_mode == rhs.ik_mode &&
    lhs.heel_toe == rhs.heel_toe &&
    lhs.first_foot_step == rhs.first_foot_step &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.height == rhs.height &&
    lhs.theta == rhs.theta &&
    lhs.step_length_x == rhs.step_length_x &&
    lhs.step_length_y == rhs.step_length_y &&
    lhs.walking_pattern == rhs.walking_pattern;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tocabi_msgs::WalkingCommand_<ContainerAllocator1> & lhs, const ::tocabi_msgs::WalkingCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tocabi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c98f46b805c25b4897e6489a2543122";
  }

  static const char* value(const ::tocabi_msgs::WalkingCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c98f46b805c25b4ULL;
  static const uint64_t static_value2 = 0x897e6489a2543122ULL;
};

template<class ContainerAllocator>
struct DataType< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tocabi_msgs/WalkingCommand";
  }

  static const char* value(const ::tocabi_msgs::WalkingCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"uint32 walk_mode\n"
"uint32 NONE = 0\n"
"uint32 STATIC_WALKING = 1\n"
"\n"
"bool[2] compensator_mode\n"
"uint32 HIP_COMPENSTOR = 0\n"
"uint32 EXTERNAL_ENCODER = 1\n"
"\n"
"uint32 ik_mode\n"
"uint32 IK=0\n"
"uint32 JACOBIAN = 1\n"
"uint32 QP = 2\n"
"\n"
"bool heel_toe\n"
"\n"
"bool first_foot_step\n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 height\n"
"float32 theta\n"
"float32 step_length_x\n"
"float32 step_length_y\n"
"\n"
"bool walking_pattern\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tocabi_msgs::WalkingCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.walk_mode);
      stream.next(m.compensator_mode);
      stream.next(m.ik_mode);
      stream.next(m.heel_toe);
      stream.next(m.first_foot_step);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.height);
      stream.next(m.theta);
      stream.next(m.step_length_x);
      stream.next(m.step_length_y);
      stream.next(m.walking_pattern);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WalkingCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tocabi_msgs::WalkingCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tocabi_msgs::WalkingCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "walk_mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.walk_mode);
    s << indent << "compensator_mode[]" << std::endl;
    for (size_t i = 0; i < v.compensator_mode.size(); ++i)
    {
      s << indent << "  compensator_mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.compensator_mode[i]);
    }
    s << indent << "ik_mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ik_mode);
    s << indent << "heel_toe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.heel_toe);
    s << indent << "first_foot_step: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.first_foot_step);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "step_length_x: ";
    Printer<float>::stream(s, indent + "  ", v.step_length_x);
    s << indent << "step_length_y: ";
    Printer<float>::stream(s, indent + "  ", v.step_length_y);
    s << indent << "walking_pattern: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.walking_pattern);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOCABI_MSGS_MESSAGE_WALKINGCOMMAND_H
