// Generated by gencpp from file tocabi_msgs/model.msg
// DO NOT EDIT!


#ifndef TOCABI_MSGS_MESSAGE_MODEL_H
#define TOCABI_MSGS_MESSAGE_MODEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tocabi_msgs
{
template <class ContainerAllocator>
struct model_
{
  typedef model_<ContainerAllocator> Type;

  model_()
    : CMM()
    , COR()
    , g()
    , M()  {
    }
  model_(const ContainerAllocator& _alloc)
    : CMM(_alloc)
    , COR(_alloc)
    , g(_alloc)
    , M(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _CMM_type;
  _CMM_type CMM;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _COR_type;
  _COR_type COR;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _g_type;
  _g_type g;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _M_type;
  _M_type M;





  typedef boost::shared_ptr< ::tocabi_msgs::model_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tocabi_msgs::model_<ContainerAllocator> const> ConstPtr;

}; // struct model_

typedef ::tocabi_msgs::model_<std::allocator<void> > model;

typedef boost::shared_ptr< ::tocabi_msgs::model > modelPtr;
typedef boost::shared_ptr< ::tocabi_msgs::model const> modelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tocabi_msgs::model_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tocabi_msgs::model_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tocabi_msgs::model_<ContainerAllocator1> & lhs, const ::tocabi_msgs::model_<ContainerAllocator2> & rhs)
{
  return lhs.CMM == rhs.CMM &&
    lhs.COR == rhs.COR &&
    lhs.g == rhs.g &&
    lhs.M == rhs.M;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tocabi_msgs::model_<ContainerAllocator1> & lhs, const ::tocabi_msgs::model_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tocabi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::model_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::model_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::model_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::model_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::model_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::model_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tocabi_msgs::model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9254f66ea788d8f550940e19a2fa2d0";
  }

  static const char* value(const ::tocabi_msgs::model_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9254f66ea788d8fULL;
  static const uint64_t static_value2 = 0x550940e19a2fa2d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::tocabi_msgs::model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tocabi_msgs/model";
  }

  static const char* value(const ::tocabi_msgs::model_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tocabi_msgs::model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] CMM\n"
"float64[] COR\n"
"float64[] g\n"
"float64[] M\n"
;
  }

  static const char* value(const ::tocabi_msgs::model_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tocabi_msgs::model_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.CMM);
      stream.next(m.COR);
      stream.next(m.g);
      stream.next(m.M);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct model_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tocabi_msgs::model_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tocabi_msgs::model_<ContainerAllocator>& v)
  {
    s << indent << "CMM[]" << std::endl;
    for (size_t i = 0; i < v.CMM.size(); ++i)
    {
      s << indent << "  CMM[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.CMM[i]);
    }
    s << indent << "COR[]" << std::endl;
    for (size_t i = 0; i < v.COR.size(); ++i)
    {
      s << indent << "  COR[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.COR[i]);
    }
    s << indent << "g[]" << std::endl;
    for (size_t i = 0; i < v.g.size(); ++i)
    {
      s << indent << "  g[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.g[i]);
    }
    s << indent << "M[]" << std::endl;
    for (size_t i = 0; i < v.M.size(); ++i)
    {
      s << indent << "  M[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.M[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOCABI_MSGS_MESSAGE_MODEL_H
