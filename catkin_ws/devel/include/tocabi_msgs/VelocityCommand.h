// Generated by gencpp from file tocabi_msgs/VelocityCommand.msg
// DO NOT EDIT!


#ifndef TOCABI_MSGS_MESSAGE_VELOCITYCOMMAND_H
#define TOCABI_MSGS_MESSAGE_VELOCITYCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tocabi_msgs
{
template <class ContainerAllocator>
struct VelocityCommand_
{
  typedef VelocityCommand_<ContainerAllocator> Type;

  VelocityCommand_()
    : task_link(0)
    , des_vel()  {
    }
  VelocityCommand_(const ContainerAllocator& _alloc)
    : task_link(0)
    , des_vel(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _task_link_type;
  _task_link_type task_link;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _des_vel_type;
  _des_vel_type des_vel;





  typedef boost::shared_ptr< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> const> ConstPtr;

}; // struct VelocityCommand_

typedef ::tocabi_msgs::VelocityCommand_<std::allocator<void> > VelocityCommand;

typedef boost::shared_ptr< ::tocabi_msgs::VelocityCommand > VelocityCommandPtr;
typedef boost::shared_ptr< ::tocabi_msgs::VelocityCommand const> VelocityCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tocabi_msgs::VelocityCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tocabi_msgs::VelocityCommand_<ContainerAllocator1> & lhs, const ::tocabi_msgs::VelocityCommand_<ContainerAllocator2> & rhs)
{
  return lhs.task_link == rhs.task_link &&
    lhs.des_vel == rhs.des_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tocabi_msgs::VelocityCommand_<ContainerAllocator1> & lhs, const ::tocabi_msgs::VelocityCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tocabi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b99b6a9207ee70b0a961b62b83d02b8d";
  }

  static const char* value(const ::tocabi_msgs::VelocityCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb99b6a9207ee70b0ULL;
  static const uint64_t static_value2 = 0xa961b62b83d02b8dULL;
};

template<class ContainerAllocator>
struct DataType< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tocabi_msgs/VelocityCommand";
  }

  static const char* value(const ::tocabi_msgs::VelocityCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 task_link\n"
"float64[] des_vel\n"
"\n"
;
  }

  static const char* value(const ::tocabi_msgs::VelocityCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_link);
      stream.next(m.des_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VelocityCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tocabi_msgs::VelocityCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tocabi_msgs::VelocityCommand_<ContainerAllocator>& v)
  {
    s << indent << "task_link: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.task_link);
    s << indent << "des_vel[]" << std::endl;
    for (size_t i = 0; i < v.des_vel.size(); ++i)
    {
      s << indent << "  des_vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.des_vel[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOCABI_MSGS_MESSAGE_VELOCITYCOMMAND_H
