// Generated by gencpp from file tocabi_msgs/positionCommand.msg
// DO NOT EDIT!


#ifndef TOCABI_MSGS_MESSAGE_POSITIONCOMMAND_H
#define TOCABI_MSGS_MESSAGE_POSITIONCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tocabi_msgs
{
template <class ContainerAllocator>
struct positionCommand_
{
  typedef positionCommand_<ContainerAllocator> Type;

  positionCommand_()
    : position()
    , traj_time(0.0)
    , gravity(false)
    , relative(false)  {
      position.assign(0.0);
  }
  positionCommand_(const ContainerAllocator& _alloc)
    : position()
    , traj_time(0.0)
    , gravity(false)
    , relative(false)  {
  (void)_alloc;
      position.assign(0.0);
  }



   typedef boost::array<double, 33>  _position_type;
  _position_type position;

   typedef double _traj_time_type;
  _traj_time_type traj_time;

   typedef uint8_t _gravity_type;
  _gravity_type gravity;

   typedef uint8_t _relative_type;
  _relative_type relative;





  typedef boost::shared_ptr< ::tocabi_msgs::positionCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tocabi_msgs::positionCommand_<ContainerAllocator> const> ConstPtr;

}; // struct positionCommand_

typedef ::tocabi_msgs::positionCommand_<std::allocator<void> > positionCommand;

typedef boost::shared_ptr< ::tocabi_msgs::positionCommand > positionCommandPtr;
typedef boost::shared_ptr< ::tocabi_msgs::positionCommand const> positionCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tocabi_msgs::positionCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tocabi_msgs::positionCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tocabi_msgs::positionCommand_<ContainerAllocator1> & lhs, const ::tocabi_msgs::positionCommand_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.traj_time == rhs.traj_time &&
    lhs.gravity == rhs.gravity &&
    lhs.relative == rhs.relative;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tocabi_msgs::positionCommand_<ContainerAllocator1> & lhs, const ::tocabi_msgs::positionCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tocabi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::positionCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::positionCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::positionCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::positionCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::positionCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::positionCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tocabi_msgs::positionCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "475a435c154b433d6e59fd7de21f22dd";
  }

  static const char* value(const ::tocabi_msgs::positionCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x475a435c154b433dULL;
  static const uint64_t static_value2 = 0x6e59fd7de21f22ddULL;
};

template<class ContainerAllocator>
struct DataType< ::tocabi_msgs::positionCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tocabi_msgs/positionCommand";
  }

  static const char* value(const ::tocabi_msgs::positionCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tocabi_msgs::positionCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[33] position\n"
"float64 traj_time\n"
"bool gravity\n"
"bool relative\n"
"\n"
;
  }

  static const char* value(const ::tocabi_msgs::positionCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tocabi_msgs::positionCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.traj_time);
      stream.next(m.gravity);
      stream.next(m.relative);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct positionCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tocabi_msgs::positionCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tocabi_msgs::positionCommand_<ContainerAllocator>& v)
  {
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "traj_time: ";
    Printer<double>::stream(s, indent + "  ", v.traj_time);
    s << indent << "gravity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gravity);
    s << indent << "relative: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relative);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOCABI_MSGS_MESSAGE_POSITIONCOMMAND_H
