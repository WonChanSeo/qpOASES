// Generated by gencpp from file tocabi_msgs/FTsensor.msg
// DO NOT EDIT!


#ifndef TOCABI_MSGS_MESSAGE_FTSENSOR_H
#define TOCABI_MSGS_MESSAGE_FTSENSOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tocabi_msgs
{
template <class ContainerAllocator>
struct FTsensor_
{
  typedef FTsensor_<ContainerAllocator> Type;

  FTsensor_()
    : Fx(0.0)
    , Fy(0.0)
    , Fz(0.0)
    , Tx(0.0)
    , Ty(0.0)
    , Tz(0.0)  {
    }
  FTsensor_(const ContainerAllocator& _alloc)
    : Fx(0.0)
    , Fy(0.0)
    , Fz(0.0)
    , Tx(0.0)
    , Ty(0.0)
    , Tz(0.0)  {
  (void)_alloc;
    }



   typedef double _Fx_type;
  _Fx_type Fx;

   typedef double _Fy_type;
  _Fy_type Fy;

   typedef double _Fz_type;
  _Fz_type Fz;

   typedef double _Tx_type;
  _Tx_type Tx;

   typedef double _Ty_type;
  _Ty_type Ty;

   typedef double _Tz_type;
  _Tz_type Tz;





  typedef boost::shared_ptr< ::tocabi_msgs::FTsensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tocabi_msgs::FTsensor_<ContainerAllocator> const> ConstPtr;

}; // struct FTsensor_

typedef ::tocabi_msgs::FTsensor_<std::allocator<void> > FTsensor;

typedef boost::shared_ptr< ::tocabi_msgs::FTsensor > FTsensorPtr;
typedef boost::shared_ptr< ::tocabi_msgs::FTsensor const> FTsensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tocabi_msgs::FTsensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tocabi_msgs::FTsensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tocabi_msgs::FTsensor_<ContainerAllocator1> & lhs, const ::tocabi_msgs::FTsensor_<ContainerAllocator2> & rhs)
{
  return lhs.Fx == rhs.Fx &&
    lhs.Fy == rhs.Fy &&
    lhs.Fz == rhs.Fz &&
    lhs.Tx == rhs.Tx &&
    lhs.Ty == rhs.Ty &&
    lhs.Tz == rhs.Tz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tocabi_msgs::FTsensor_<ContainerAllocator1> & lhs, const ::tocabi_msgs::FTsensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tocabi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::FTsensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::FTsensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::FTsensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::FTsensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::FTsensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::FTsensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tocabi_msgs::FTsensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "97e40ed431080f742441407788af0365";
  }

  static const char* value(const ::tocabi_msgs::FTsensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x97e40ed431080f74ULL;
  static const uint64_t static_value2 = 0x2441407788af0365ULL;
};

template<class ContainerAllocator>
struct DataType< ::tocabi_msgs::FTsensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tocabi_msgs/FTsensor";
  }

  static const char* value(const ::tocabi_msgs::FTsensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tocabi_msgs::FTsensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Fx\n"
"float64 Fy\n"
"float64 Fz\n"
"float64 Tx\n"
"float64 Ty\n"
"float64 Tz\n"
;
  }

  static const char* value(const ::tocabi_msgs::FTsensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tocabi_msgs::FTsensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Fx);
      stream.next(m.Fy);
      stream.next(m.Fz);
      stream.next(m.Tx);
      stream.next(m.Ty);
      stream.next(m.Tz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FTsensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tocabi_msgs::FTsensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tocabi_msgs::FTsensor_<ContainerAllocator>& v)
  {
    s << indent << "Fx: ";
    Printer<double>::stream(s, indent + "  ", v.Fx);
    s << indent << "Fy: ";
    Printer<double>::stream(s, indent + "  ", v.Fy);
    s << indent << "Fz: ";
    Printer<double>::stream(s, indent + "  ", v.Fz);
    s << indent << "Tx: ";
    Printer<double>::stream(s, indent + "  ", v.Tx);
    s << indent << "Ty: ";
    Printer<double>::stream(s, indent + "  ", v.Ty);
    s << indent << "Tz: ";
    Printer<double>::stream(s, indent + "  ", v.Tz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOCABI_MSGS_MESSAGE_FTSENSOR_H
