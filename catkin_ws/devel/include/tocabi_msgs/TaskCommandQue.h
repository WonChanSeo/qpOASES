// Generated by gencpp from file tocabi_msgs/TaskCommandQue.msg
// DO NOT EDIT!


#ifndef TOCABI_MSGS_MESSAGE_TASKCOMMANDQUE_H
#define TOCABI_MSGS_MESSAGE_TASKCOMMANDQUE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tocabi_msgs/TaskCommand.h>

namespace tocabi_msgs
{
template <class ContainerAllocator>
struct TaskCommandQue_
{
  typedef TaskCommandQue_<ContainerAllocator> Type;

  TaskCommandQue_()
    : tque()  {
    }
  TaskCommandQue_(const ContainerAllocator& _alloc)
    : tque(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::tocabi_msgs::TaskCommand_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::tocabi_msgs::TaskCommand_<ContainerAllocator> >> _tque_type;
  _tque_type tque;





  typedef boost::shared_ptr< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> const> ConstPtr;

}; // struct TaskCommandQue_

typedef ::tocabi_msgs::TaskCommandQue_<std::allocator<void> > TaskCommandQue;

typedef boost::shared_ptr< ::tocabi_msgs::TaskCommandQue > TaskCommandQuePtr;
typedef boost::shared_ptr< ::tocabi_msgs::TaskCommandQue const> TaskCommandQueConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tocabi_msgs::TaskCommandQue_<ContainerAllocator1> & lhs, const ::tocabi_msgs::TaskCommandQue_<ContainerAllocator2> & rhs)
{
  return lhs.tque == rhs.tque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tocabi_msgs::TaskCommandQue_<ContainerAllocator1> & lhs, const ::tocabi_msgs::TaskCommandQue_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tocabi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "072a98112aff33a4aa8fe36313da5528";
  }

  static const char* value(const ::tocabi_msgs::TaskCommandQue_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x072a98112aff33a4ULL;
  static const uint64_t static_value2 = 0xaa8fe36313da5528ULL;
};

template<class ContainerAllocator>
struct DataType< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tocabi_msgs/TaskCommandQue";
  }

  static const char* value(const ::tocabi_msgs::TaskCommandQue_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "TaskCommand[] tque\n"
"================================================================================\n"
"MSG: tocabi_msgs/TaskCommand\n"
"# CoM/Pelvis Control\n"
"float64 ratio # left foot 0 ----- 1 right foot\n"
"float64 height\n"
"\n"
"float64 pelv_pitch\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"\n"
"uint32 solver\n"
"uint32 contactredis\n"
"\n"
"bool maintain_lc\n"
"\n"
"# Contact \n"
"bool left\n"
"bool right\n"
"\n"
"# Contact \n"
"bool left_foot\n"
"bool right_foot\n"
"bool left_hand\n"
"bool right_hand\n"
"\n"
"# Control Duration And Mode\n"
"float64 time\n"
"int32 mode\n"
"\n"
"# Left/Right Arm Control\n"
"float64 l_x\n"
"float64 l_y\n"
"float64 l_z\n"
"float64 l_roll\n"
"float64 l_pitch\n"
"float64 l_yaw\n"
"\n"
"float64 r_x\n"
"float64 r_y\n"
"float64 r_z\n"
"float64 r_roll\n"
"float64 r_pitch\n"
"float64 r_yaw\n"
"\n"
"# Walking\n"
"uint32 walking_enable\n"
"uint32 pattern\n"
"uint32 pattern2\n"
"uint32 comcontrol\n"
"uint32 ik_mode\n"
"bool dob\n"
"bool imu\n"
"bool mom\n"
"bool MPC\n"
"uint32 first_foot_step\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 walking_height\n"
"float32 theta\n"
"float32 step_length_x\n"
"float32 step_length_y\n"
"\n"
"# TaskGain\n"
"bool customTaskGain\n"
"float32 acc_p\n"
"float32 pos_p\n"
"float32 pos_d\n"
"float32 ang_p\n"
"float32 ang_d\n"
;
  }

  static const char* value(const ::tocabi_msgs::TaskCommandQue_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskCommandQue_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tocabi_msgs::TaskCommandQue_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tocabi_msgs::TaskCommandQue_<ContainerAllocator>& v)
  {
    s << indent << "tque[]" << std::endl;
    for (size_t i = 0; i < v.tque.size(); ++i)
    {
      s << indent << "  tque[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tocabi_msgs::TaskCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.tque[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOCABI_MSGS_MESSAGE_TASKCOMMANDQUE_H
