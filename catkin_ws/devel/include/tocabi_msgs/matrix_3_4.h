// Generated by gencpp from file tocabi_msgs/matrix_3_4.msg
// DO NOT EDIT!


#ifndef TOCABI_MSGS_MESSAGE_MATRIX_3_4_H
#define TOCABI_MSGS_MESSAGE_MATRIX_3_4_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tocabi_msgs
{
template <class ContainerAllocator>
struct matrix_3_4_
{
  typedef matrix_3_4_<ContainerAllocator> Type;

  matrix_3_4_()
    : firstRow()
    , secondRow()
    , thirdRow()  {
    }
  matrix_3_4_(const ContainerAllocator& _alloc)
    : firstRow(_alloc)
    , secondRow(_alloc)
    , thirdRow(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _firstRow_type;
  _firstRow_type firstRow;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _secondRow_type;
  _secondRow_type secondRow;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _thirdRow_type;
  _thirdRow_type thirdRow;





  typedef boost::shared_ptr< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> const> ConstPtr;

}; // struct matrix_3_4_

typedef ::tocabi_msgs::matrix_3_4_<std::allocator<void> > matrix_3_4;

typedef boost::shared_ptr< ::tocabi_msgs::matrix_3_4 > matrix_3_4Ptr;
typedef boost::shared_ptr< ::tocabi_msgs::matrix_3_4 const> matrix_3_4ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tocabi_msgs::matrix_3_4_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tocabi_msgs::matrix_3_4_<ContainerAllocator1> & lhs, const ::tocabi_msgs::matrix_3_4_<ContainerAllocator2> & rhs)
{
  return lhs.firstRow == rhs.firstRow &&
    lhs.secondRow == rhs.secondRow &&
    lhs.thirdRow == rhs.thirdRow;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tocabi_msgs::matrix_3_4_<ContainerAllocator1> & lhs, const ::tocabi_msgs::matrix_3_4_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tocabi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e3c0ab9488eee5997dabd9ca7aee24d";
  }

  static const char* value(const ::tocabi_msgs::matrix_3_4_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e3c0ab9488eee59ULL;
  static const uint64_t static_value2 = 0x97dabd9ca7aee24dULL;
};

template<class ContainerAllocator>
struct DataType< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tocabi_msgs/matrix_3_4";
  }

  static const char* value(const ::tocabi_msgs::matrix_3_4_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] firstRow\n"
"float64[] secondRow\n"
"float64[] thirdRow\n"
;
  }

  static const char* value(const ::tocabi_msgs::matrix_3_4_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.firstRow);
      stream.next(m.secondRow);
      stream.next(m.thirdRow);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct matrix_3_4_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tocabi_msgs::matrix_3_4_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tocabi_msgs::matrix_3_4_<ContainerAllocator>& v)
  {
    s << indent << "firstRow[]" << std::endl;
    for (size_t i = 0; i < v.firstRow.size(); ++i)
    {
      s << indent << "  firstRow[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.firstRow[i]);
    }
    s << indent << "secondRow[]" << std::endl;
    for (size_t i = 0; i < v.secondRow.size(); ++i)
    {
      s << indent << "  secondRow[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.secondRow[i]);
    }
    s << indent << "thirdRow[]" << std::endl;
    for (size_t i = 0; i < v.thirdRow.size(); ++i)
    {
      s << indent << "  thirdRow[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.thirdRow[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOCABI_MSGS_MESSAGE_MATRIX_3_4_H
